import React, { useState } from 'react';
import { type User, type Post } from '../services/types';
import { postService } from '../services/postService';
import { offlineService } from '../services/offlineService';
import './CreatePostCard.scss';

interface CreatePostCardProps {
    currentUser?: User | null;
    onPostCreated?: (post: Post) => void;
    onCancel?: () => void;
    projectId: number;
}

// –¢–∏–ø—ã –∑–∞–ø–∏—Å–µ–π –ø–æ —Ä–æ–ª—è–º
type ContractorRecordType =
    | '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–¢–ù'
    | '–û—Ç—á–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–∞–º'
    | '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏–π'
    | '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π';

type SupervisionRecordType =
    | '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è'
    | '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—á–∞–Ω–∏—è'
    | '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—á–∞–Ω–∏—è';

type InspectorRecordType =
    | '–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∞–±. –æ—Ç–±–æ—Ä–∞'
    | '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è'
    | '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è'
    | '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è';

type RecordType = ContractorRecordType | SupervisionRecordType | InspectorRecordType;

const CreatePostCard = ({ currentUser, onPostCreated, onCancel, projectId }: CreatePostCardProps) => {
    const userRole = currentUser?.role;
    const isContractor = userRole === 'ROLE_CONTRACTOR';
    const isSupervision = userRole === 'ROLE_SUPERVISION';
    const isInspector = userRole === 'ROLE_INSPECTOR';
    const isAdmin = userRole === 'ROLE_ADMIN';

    const [postData, setPostData] = useState({
        title: '',
        content: '',
        type: '' as RecordType,
        files: [] as File[],
        hasPhoto: false
    });

    const [isSubmitting, setIsSubmitting] = useState(false);

    // –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
    React.useEffect(() => {
        document.body.classList.add('create-post-body-no-scroll');

        return () => {
            document.body.classList.remove('create-post-body-no-scroll');
        };
    }, []);

    // –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    React.useEffect(() => {
        const handleEscape = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && onCancel) {
                onCancel();
            }
        };

        document.addEventListener('keydown', handleEscape);
        return () => document.removeEventListener('keydown', handleEscape);
    }, [onCancel]);

    // –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    const getRecordTypesByRole = (): RecordType[] => {
        if (isContractor) {
            return [
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–¢–ù',
                '–û—Ç—á–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–∞–º',
                '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏–π',
                '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π'
            ];
        } else if (isSupervision) {
            return [
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è',
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—á–∞–Ω–∏—è',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—á–∞–Ω–∏—è'
            ];
        } else if (isInspector) {
            return [
                '–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∞–±. –æ—Ç–±–æ—Ä–∞',
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è'
            ];
        } else if (isAdmin) {
            return [
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–¢–ù',
                '–û—Ç—á–µ—Ç—ã –ø–æ —Ä–∞–±–æ—Ç–∞–º',
                '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏–π',
                '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π',
                '–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∞–±. –æ—Ç–±–æ—Ä–∞',
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è',
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—á–∞–Ω–∏—è',
                '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—á–∞–Ω–∏—è'
            ];
        }
        return [];
    };

    const recordTypes = getRecordTypesByRole();

    const handleInputChange = (field: keyof typeof postData, value: string | boolean | File[] | RecordType) => {
        setPostData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        if (event.target.files) {
            const newFiles = Array.from(event.target.files);
            setPostData(prev => ({
                ...prev,
                files: [...prev.files, ...newFiles]
            }));
        }
    };

    const handleRemoveFile = (index: number) => {
        setPostData(prev => ({
            ...prev,
            files: prev.files.filter((_, i) => i !== index)
        }));
    };

    const handleOverlayClick = (e: React.MouseEvent) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –∏–º–µ–Ω–Ω–æ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π, –∞ –Ω–µ –Ω–∞ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (e.target === e.currentTarget && onCancel) {
            onCancel();
        }
    };

    const handleModalContentClick = (e: React.MouseEvent) => {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –∫–ª–∏–∫ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª –µ—ë
        e.stopPropagation();
    };

    const handleSubmit = async (event: React.FormEvent) => {
        event.preventDefault();
        if (!postData.type || !postData.title || !postData.content) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }

        if (!currentUser?.id) {
            alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            return;
        }

        setIsSubmitting(true);
        try {
            const finalTitle = `[${postData.type}] ${postData.title}`;

            const postRequest = {
                title: finalTitle,
                content: postData.content,
                author: currentUser.id,
                object: projectId,
                files: postData.files.length > 0 ? postData.files : undefined,
                status: 'published'
            };

            let createdPost: Post;

            if (offlineService.isOnline()) {
                // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º
                createdPost = await postService.createPost(postRequest);
                console.log('‚úÖ Post created online:', createdPost);
            } else {
                // –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
                if (!offlineService.canSavePostOffline(postRequest)) {
                    alert('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç —Å —Ñ–∞–π–ª–∞–º–∏ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
                    setIsSubmitting(false);
                    return;
                }

                const actionId = await offlineService.saveAction('CREATE_POST', postRequest);
                console.log('üì± Post saved offline with ID:', actionId);

                createdPost = {
                    id: parseInt(actionId),
                    title: finalTitle,
                    content: postData.content,
                    created_at: new Date().toISOString(),
                    files: [],
                    status: 'offline',
                    author: currentUser
                };
            }

            if (onPostCreated) {
                onPostCreated(createdPost);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div
            className="create-post-modal-overlay"
            onClick={handleOverlayClick}
            role="dialog"
            aria-modal="true"
            aria-labelledby="create-post-title"
        >
            <div
                className="create-post-modal-content"
                onClick={handleModalContentClick} // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            >
                <div className="create-post-header">
                    <h1 id="create-post-title">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h1>
                </div>

                <form onSubmit={handleSubmit} className="create-post-form">
                    <div className="create-post-section">
                        <h2>–¢–∏–ø –∑–∞–ø–∏—Å–∏</h2>
                        <select
                            className="create-post-select"
                            value={postData.type}
                            onChange={(e) => handleInputChange('type', e.target.value as RecordType)}
                            required
                        >
                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏</option>
                            {recordTypes.map((type) => (
                                <option key={type} value={type}>
                                    {type}
                                </option>
                            ))}
                        </select>
                    </div>

                    <div className="create-post-section">
                        <h2>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏</h2>
                        <input
                            type="text"
                            className="create-post-input"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"
                            value={postData.title}
                            onChange={(e) => handleInputChange('title', e.target.value)}
                            required
                        />
                    </div>

                    <div className="create-post-section">
                        <h2>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ</h2>
                        <textarea
                            className="create-post-textarea"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∏"
                            value={postData.content}
                            onChange={(e) => handleInputChange('content', e.target.value)}
                            required
                            rows={6} // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                        />
                    </div>

                    <div className="create-post-section">
                        <h2>–§–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã</h2>
                        <button
                            type="button"
                            className="create-post-file-button"
                            onClick={() => document.getElementById('file-input')?.click()}
                        >
                            –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã
                        </button>
                        <input
                            id="file-input"
                            type="file"
                            className="create-post-file-input"
                            multiple
                            onChange={handleFileChange}
                            accept="image/*,.pdf,.doc,.docx,.xls,.xlsx"
                        />

                        {postData.files.length > 0 && (
                            <div className="create-post-files-section">
                                <p>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</p>
                                <div className="create-post-files-list">
                                    {postData.files.map((file, index) => (
                                        <div key={index} className="create-post-file-item">
                                            <span className="create-post-file-name">{file.name}</span>
                                            <button
                                                type="button"
                                                className="create-post-remove-file"
                                                onClick={() => handleRemoveFile(index)}
                                            >
                                                –£–¥–∞–ª–∏—Ç—å
                                            </button>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>

                    <div className="create-post-actions">
                        <button
                            type="submit"
                            className="create-post-submit-button"
                            disabled={isSubmitting}
                        >
                            {isSubmitting ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å'}
                        </button>
                        {onCancel && (
                            <button
                                type="button"
                                className="create-post-cancel-button"
                                onClick={onCancel}
                            >
                                –û—Ç–º–µ–Ω–∞
                            </button>
                        )}
                    </div>
                </form>
            </div>
        </div>
    );
};

export default CreatePostCard;