import { useState, useEffect, useRef, useCallback } from 'react'; 
import { useParams, useNavigate } from 'react-router-dom';
import { type ConstructionProject, type User, type Post } from '../services/types';
import WorkCard from '../components/WorkCard';
import Header from "../components/Header";
import MapComponent from '../components/MapComponent';
import { projectService } from '../services/projectService';
import { fileService } from '../services/fileService';

const ObjectForInspector = () => {
    const { projectId } = useParams<{ projectId: string }>();
    const navigate = useNavigate();
    const [project, setProject] = useState<ConstructionProject | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const actFileInputRef = useRef<HTMLInputElement>(null);
    const compositionFileInputRef = useRef<HTMLInputElement>(null);

    const [actFile, setActFile] = useState<File | null>(null);
    const [compositionFile, setCompositionFile] = useState<File | null>(null);
    const [hasAct, setHasAct] = useState<boolean>(false);
    const [hasWorkComposition, setHasWorkComposition] = useState<boolean>(false);

    const checkFilesExistence = useCallback(async () => {
        if (!projectId) return;
        
        try {
            const [actExists, compositionExists] = await Promise.all([
                fileService.checkActExists(Number(projectId)),
                fileService.checkWorkCompositionExists(Number(projectId))
            ]);
            
            setHasAct(actExists);
            setHasWorkComposition(compositionExists);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
        }
    }, [projectId]); 

    useEffect(() => {
        const fetchProjectData = async () => {
            try {
                setLoading(true);
                if (!projectId) {
                    throw new Error('ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
                }
                
                const projectData = await projectService.getProjectById(Number(projectId));
                setProject(projectData);
                
                //await checkFilesExistence();
            } catch (err) {
                setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
            } finally {
                setLoading(false);
            }
        };

        if (projectId) {
            fetchProjectData();
        }
    }, [projectId, checkFilesExistence]); 

    const handleOpenAct = () => {
        if (hasAct) {
            downloadAct();
        } else {
            actFileInputRef.current?.click();
        }
    };

    const handleShowWorkComposition = () => {
        if (hasWorkComposition) {
            downloadWorkComposition();
        } else {
            compositionFileInputRef.current?.click();
        }
    };

    const handleActFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
            setActFile(file);
            uploadActFile(file);
        }
    };

    const handleCompositionFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
            setCompositionFile(file);
            uploadWorkCompositionFile(file);
        }
    };

    const uploadActFile = async (file: File) => {
        try {
            if (!projectId) throw new Error('ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
            
            await fileService.uploadAct(Number(projectId), file);
            setHasAct(true);
            alert('–ê–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∞');
        }
    };

    const downloadAct = async () => {
        try {
            if (!projectId) throw new Error('ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
            
            const blob = await fileService.downloadAct(Number(projectId));
            fileService.downloadBlob(blob, 'act.pdf');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∞');
        }
    };

    const uploadWorkCompositionFile = async (file: File) => {
        try {
            if (!projectId) throw new Error('ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
            
            await fileService.uploadWorkComposition(Number(projectId), file);
            setHasWorkComposition(true);
            alert('–°–æ—Å—Ç–∞–≤ —Ä–∞–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–±–æ—Ç:', error);
            alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–±–æ—Ç');
        }
    };

    const downloadWorkComposition = async () => {
        try {
            if (!projectId) throw new Error('ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
            
            const blob = await fileService.downloadWorkComposition(Number(projectId));
            fileService.downloadBlob(blob, 'work_composition.pdf');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–±–æ—Ç:', error);
            alert('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ —Ä–∞–±–æ—Ç');
        }
    };

    const handleAddWorker = () => {
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç');
    };

    const handleUserReview = (user: User) => {
        console.log('–û–±–∑–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
        navigate(`/user/${user.id}`);
    };

    if (loading) return <div className="loadingObjInsp">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    if (error) return <div className="errorObjInsp">–û—à–∏–±–∫–∞: {error}</div>;
    if (!project) return <div className="errorObjInsp">–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

    const mainAddress = project.coordinates.length > 0 
        ? `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${project.coordinates[0].x}, ${project.coordinates[0].y}`
        : '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';

    return (
        <div className="inspectorPage">
            <Header />

            <div className="navSection">
                <button 
                    className="backBtn"
                    onClick={() => navigate('/objects')}
                > ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –æ–±—ä–µ–∫—Ç–æ–≤ </button>
            </div>

            <section className="objInfo">
                <h2>{project.name}</h2>
                <p className="objectDescription">{project.description}</p>
                <p className="objectAddress">{mainAddress}</p>
            </section>

            <section className="mapSection">
                <h3>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</h3>
                <div className="mapContainer">
                    <MapComponent 
                        coordinates={project.coordinates} 
                        zoom={16}
                        height="400px"
                        popupText={project.name} 
                    />
                </div>
            </section>

            <section className="responsibleSection">
                <div className="responsibleInfo">
                    <h4>–°–ª—É–∂–±–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π):</h4>
                    <p>{project.responsibleSupervision?.username || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</p>
                </div>
                
                <div className="responsibleInfo">
                    <h4>–ü–æ–¥—Ä—è–¥—á–∏–∫ (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π):</h4>
                    <p>{project.responsibleContractor?.username || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</p>
                </div>
                
                <div className="responsibleInfo">
                    <h4>–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:</h4>
                    
                    <span className={`status-badge status-${project.status || 'planned'}`}>
                        {project.status === 'active' && '–ê–∫—Ç–∏–≤–Ω—ã–π'}
                        {project.status === 'completed' && '–ó–∞–≤–µ—Ä—à–µ–Ω'}
                        {project.status === 'planned' && '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'}
                        
                        {!project.status && '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </span>
                </div>
            </section>

            <section className="actionsSection">
                <button className="actBtn" onClick={handleOpenAct}>
                    {hasAct ? 'üì• –°–∫–∞—á–∞—Ç—å –∞–∫—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞' : 
                     actFile ? `‚úÖ –ê–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${actFile.name}` : 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–±—ä–µ–∫—Ç–∞'}
                </button>
                
                <input
                    type="file"
                    ref={actFileInputRef}
                    onChange={handleActFileChange}
                    style={{ display: 'none' }}
                    accept=".pdf,.doc,.docx" 
                />
            </section>

            {project.posts && project.posts.length > 0 && (
                <section className="postsSection">
                    <h3>–ü–æ—Å—Ç—ã –æ–±—ä–µ–∫—Ç–∞</h3>
                    <div className="postsContainer">
                        {project.posts.map((post: Post) => (
                            <div key={post.id} className="postCard">
                                <h4>{post.title}</h4>
                                <p>{post.content}</p>
                                <small>–°–æ–∑–¥–∞–Ω: {post.created_at}</small>
                            </div>
                        ))}
                    </div>
                </section>
            )}

            {project.posts && project.posts.length === 0 && (
                <section className="postsSection">
                    <h3>–ü–æ—Å—Ç—ã –æ–±—ä–µ–∫—Ç–∞</h3>
                    <p>–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</p>
                </section>
            )}

            <section className="scheduleSection">
                <h3>–°–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç</h3>
                <div className="scheduleContainer">
                    <div className="schedulePlaceholder">
                        –°–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
                    </div>
                </div>
            </section>

            <section className="workCompositionSection">
                <button className="compositionBtn" onClick={handleShowWorkComposition}>
                    {hasWorkComposition ? 'üì• –°–∫–∞—á–∞—Ç—å —Å–æ—Å—Ç–∞–≤ —Ä–∞–±–æ—Ç' : 
                     compositionFile ? `‚úÖ –°–æ—Å—Ç–∞–≤ —Ä–∞–±–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${compositionFile.name}` : 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–∞–≤ —Ä–∞–±–æ—Ç'}
                </button>
                
                <input
                    type="file"
                    ref={compositionFileInputRef}
                    onChange={handleCompositionFileChange}
                    style={{ display: 'none' }}
                    accept=".pdf,.doc,.docx,.xls,.xlsx"
                />
            </section>

            <section className="workersSection">
                <div className="workersHeader">
                    <h3>–†–∞–±–æ—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ</h3>
                    <button className="addWorkerBtn" onClick={handleAddWorker}>
                        + –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    </button>
                </div>
                
                <div className="workersGrid">
                    {project.users && project.users.length > 0 ? (
                        project.users.map((user: User) => (
                            <WorkCard 
                                key={user.id} 
                                user={user}
                                onReview={handleUserReview}
                            />
                        ))
                    ) : (
                        <p className="noWorkers">–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
                    )}
                </div>
            </section>
        </div>
    );
}

export default ObjectForInspector;