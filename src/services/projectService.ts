import api from "./api";
import { type ConstructionProject, type CreateProjectRequest, type ApiResponse } from './types';
import { geoService } from "./geoService";

class ProjectService {
    // GET-–∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    async getProjects(): Promise<ConstructionProject[]> {
        try {
            const res = await api.get<ConstructionProject[]>('/objects/my_objects/');
            return res.data;
        } catch (error) {
            console.error('Error fetching projects: ', error);
            throw error;
        }
    }

    // GET-–∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∞–π–¥–∏
    async getProjectById(id: number): Promise<ConstructionProject>{
        try {
            const res = await api.get<ConstructionProject>(`/objects/${id}/`);
            return res.data;
        } catch (error) {
            console.error('Error fetching project: ', error);
            throw error;
        }
    }
    // POST-–∑–∞–ø—Ä–æ—Å - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    async createProject(projectData: CreateProjectRequest): Promise<ConstructionProject> {
        try {
            const res = await api.post<ConstructionProject>('/objects/my_objects/',projectData);
            return res.data;
        } catch (error) {
            console.error('Error creating project: ', error);
            throw error;
        }
    }
    // PUT-–∑–∞–ø—Ä–æ—Å - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    async updateProject(id: number, projectData: Partial<ConstructionProject>): Promise<ConstructionProject> {
        try {
            const res = await api.put<ApiResponse<ConstructionProject>>(`/objects/${id}`, projectData);
            return res.data.data;
        } catch (error) {
            console.error('Error updating project: ', error);
            throw error;
        }
    }
    // DELETE-–∑–∞–ø—Ä–æ—Å - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    async deleteProject(id: number): Promise<void> {
        try {
            await api.delete(`/objects/my_objects/${id}`);
        } catch (error) {
            console.error('Error deleting project: ', error);
            throw error;
        }
    }
    // GET-–∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ 
    // async getProjectCoordinates(id: number): Promise<[number, number][]> {
    //     try {
    //         const project = await this.getProjectById(id);
    //         return project.coordinates; 
    //     } catch (error) {
    //         console.error('Error fetching project coordinates:', error);
    //         throw error;
    //     }
    // }
    // –û–±–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    async getProjectCoordinates(id: number): Promise<[number, number][]> {
        try {
            const project = await this.getProjectById(id);
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º {x, y} –≤ [number, number]
            return project.coordinates.map(coord => [coord.x, coord.y]);
        } catch (error) {
            console.error('Error fetching project coordinates:', error);
            throw error;
        }
    }
    // PUT-–∑–∞–ø—Ä–æ—Å - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ 
    async updateProjectCoordinates(projectId: number, coordinates: [number, number][]): Promise<ConstructionProject> {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
            const res = await api.put<ApiResponse<ConstructionProject>>(`/objects/my_objects/${projectId}`, { 
                coordinates: coordinates 
            });
            return res.data.data;
        } catch (error) {
            console.error('Error updating project coordinates: ', error);
            throw error;
        }
    }
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞)
    async isUserOnProject(projectId: number): Promise<boolean> {
        try {
            const project = await this.getProjectById(projectId);
            const userCoords = await geoService.getCurrentPosition();
            const polygonCoords: [number, number][] = project.coordinates.map(coord => [coord.x, coord.y]);
            
            return geoService.isPointInPolygon(userCoords, polygonCoords);
        } catch (error) {
            console.error('Error checking user location:', error);
            return false;
        }
    }

    // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –ø—Ä–æ–µ–∫—Ç–∞
    async getDistanceToProject(projectId: number): Promise<number> {
        try {
            const project = await this.getProjectById(projectId);
            const userCoords = await geoService.getCurrentPosition();
            const firstCoord = project.coordinates[0];
            if (!firstCoord) {
                return -1;
            }
            const projectCenter: [number, number] = [firstCoord.x, firstCoord.y];
            return geoService.calculateDistance(userCoords, projectCenter);
        } catch (error) {
            console.error('Error calculating distance:', error);
            return -1;
        }
    }
    // –í projectService.ts
    async debugGetProjects(): Promise<unknown> {
        try {
            console.log('üîç DEBUG - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /objects/my_objects/');
            const response = await api.get('/objects/my_objects/');
            console.log('üì® DEBUG - –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', response);
            console.log('üìä DEBUG - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', response.data);
            console.log('üîß DEBUG - –°—Ç–∞—Ç—É—Å:', response.status);
            return response.data;
        } catch (error) {
            console.error('‚ùå DEBUG - –û—à–∏–±–∫–∞:', error);
            throw error;
        }
    }
}

export const projectService = new ProjectService();