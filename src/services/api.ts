// import axios, { type AxiosInstance, type AxiosResponse, AxiosError, type InternalAxiosRequestConfig } from 'axios';
// import { authService }  from './authService';

// // –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
// const API_BASE_URL = '/api';

// // —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
// const api: AxiosInstance = axios.create({
//     baseURL: API_BASE_URL,  // –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å API 
//     timeout: 10000,         // –º–∞–∫—Å. –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (10 —Å–µ–∫)

//     headers: {
//         'Content-Type': 'application/json',
//     },
// });

// // 1—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É)
// api.interceptors.request.use(
//     (config: InternalAxiosRequestConfig) => {
//         // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
//         const token = authService.getToken();
//         if (token && config.headers) {
//             // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
//             config.headers.Authorization = `Bearer ${token}`;
//         }
//         return config;
//     },
//     (error: AxiosError) => {
//         // –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
//         return Promise.reject(error);
//     }
// );

// // 2–æ–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ (–æ—Ç–≤–µ—Ç–æ–≤)
// api.interceptors.response.use(
//     (response: AxiosResponse) => {
//         console.log('Response status:', response.status);
//         console.log('Response data:', response.data);
//         return response;
//     },
//     async (error: AxiosError) => {
//         // –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
//         if (error.code === 'ERR_NETWORK') {
//             console.error('Network error: no connection to server');
//         }
        
//         const originalRequest = error.config as InternalAxiosRequestConfig & { _retry?: boolean };
        
//         // –ø—Ä–∏ –æ—à–∏–±–∫–µ 401 (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω) –∏ —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
//         if (error.response?.status === 401 && !originalRequest._retry) {
//             originalRequest._retry = true;
//             try {
//                 // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
//                 const refreshed = await authService.refreshToken();
//                 if (refreshed) {
//                     // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
//                     return api(originalRequest);
//                 }
//             } catch (refreshError) {
//                 console.error('Token refresh failed:', refreshError);
//                 // –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω - –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
//                 authService.logout();
//                 window.location.href = '/auth';
//             }
//         }
//         // –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ 401 –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
//         return Promise.reject(error);
//     }
// );

// export default api;

import axios, { type AxiosInstance, type AxiosResponse, AxiosError, type InternalAxiosRequestConfig } from 'axios';
import { authService } from './authService';

const API_BASE_URL = '/api';

const api: AxiosInstance = axios.create({
    baseURL: API_BASE_URL,
    timeout: 10000,
    headers: {
        'Content-Type': 'application/json',
    },
});

// –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
api.interceptors.request.use(
    (config: InternalAxiosRequestConfig) => {
        const token = authService.getToken();
        
        console.log('üîê REQUEST INTERCEPTOR DETAILS:');
        console.log('   URL:', config.url);
        console.log('   Method:', config.method?.toUpperCase());
        console.log('   Token exists:', !!token);
        console.log('   Token length:', token?.length);
        console.log('   Full token:', token);
        
        if (token && config.headers) {
            config.headers.Authorization = `Bearer ${token}`;
            console.log('   ‚úÖ Authorization header set');
            console.log('   üîç Header value:', `Bearer ${token}`);
        } else {
            console.log('   ‚ùå No token available for request');
        }
        
        return config;
    },
    (error: AxiosError) => {
        console.error('‚ùå Request interceptor error:', error);
        return Promise.reject(error);
    }
);

// –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
api.interceptors.response.use(
    (response: AxiosResponse) => {
        console.log('‚úÖ RESPONSE SUCCESS:', {
            url: response.config.url,
            status: response.status,
            data: response.data
        });
        return response;
    },
    async (error: AxiosError) => {
        console.error('‚ùå RESPONSE ERROR DETAILS:');
        console.error('   URL:', error.config?.url);
        console.error('   Method:', error.config?.method?.toUpperCase());
        console.error('   Status:', error.response?.status);
        console.error('   Status Text:', error.response?.statusText);
        console.error('   Response Data:', error.response?.data);
        console.error('   Request Headers:', error.config?.headers);
        
        if (error.response?.status === 401) {
            console.log('üîÑ 401 Unauthorized - logging out');
            const currentToken = authService.getToken();
            console.log('   Current token during 401:', currentToken);
            authService.logout();
            window.location.href = '/auth';
        }
        
        return Promise.reject(error);
    }
);

export default api;